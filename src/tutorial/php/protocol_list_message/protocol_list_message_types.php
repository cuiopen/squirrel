<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['squirrel_protocol_E_ListRequestType'] = array(
  'LIST_REQUEST_TYPE_PUSH' => 0,
  'LIST_REQUEST_TYPE_POP' => 1,
  'LIST_REQUEST_TYPE_REMOVE' => 2,
  'LIST_REQUEST_TYPE_CLEAR' => 3,
  'LIST_REQUEST_TYPE_DELETE' => 4,
  'LIST_REQUEST_TYPE_MAX' => 5,
);

final class ListRequestType {
  const LIST_REQUEST_TYPE_PUSH = 0;
  const LIST_REQUEST_TYPE_POP = 1;
  const LIST_REQUEST_TYPE_REMOVE = 2;
  const LIST_REQUEST_TYPE_CLEAR = 3;
  const LIST_REQUEST_TYPE_DELETE = 4;
  const LIST_REQUEST_TYPE_MAX = 5;
  static public $__names = array(
    0 => 'LIST_REQUEST_TYPE_PUSH',
    1 => 'LIST_REQUEST_TYPE_POP',
    2 => 'LIST_REQUEST_TYPE_REMOVE',
    3 => 'LIST_REQUEST_TYPE_CLEAR',
    4 => 'LIST_REQUEST_TYPE_DELETE',
    5 => 'LIST_REQUEST_TYPE_MAX',
  );
}

$GLOBALS['squirrel_protocol_E_ListResponseType'] = array(
  'LIST_RESPONSE_TYPE_SUCCESS' => 0,
  'LIST_RESPONSE_TYPE_KEY_NOT_EXIST' => 1,
  'LIST_RESPONSE_TYPE_ELEM_ALREDY_EXIST' => 2,
  'LIST_RESPONSE_TYPE_ELEM_NOT_EXIST' => 3,
  'LIST_RESPONSE_TYPE_EMPTY' => 4,
  'LIST_RESPONSE_TYPE_DISCONNECTED' => 5,
  'LIST_RESPONSE_TYPE_UNKNOWN' => 6,
  'LIST_RESPONSE_TYPE_MAX' => 7,
);

final class ListResponseType {
  const LIST_RESPONSE_TYPE_SUCCESS = 0;
  const LIST_RESPONSE_TYPE_KEY_NOT_EXIST = 1;
  const LIST_RESPONSE_TYPE_ELEM_ALREDY_EXIST = 2;
  const LIST_RESPONSE_TYPE_ELEM_NOT_EXIST = 3;
  const LIST_RESPONSE_TYPE_EMPTY = 4;
  const LIST_RESPONSE_TYPE_DISCONNECTED = 5;
  const LIST_RESPONSE_TYPE_UNKNOWN = 6;
  const LIST_RESPONSE_TYPE_MAX = 7;
  static public $__names = array(
    0 => 'LIST_RESPONSE_TYPE_SUCCESS',
    1 => 'LIST_RESPONSE_TYPE_KEY_NOT_EXIST',
    2 => 'LIST_RESPONSE_TYPE_ELEM_ALREDY_EXIST',
    3 => 'LIST_RESPONSE_TYPE_ELEM_NOT_EXIST',
    4 => 'LIST_RESPONSE_TYPE_EMPTY',
    5 => 'LIST_RESPONSE_TYPE_DISCONNECTED',
    6 => 'LIST_RESPONSE_TYPE_UNKNOWN',
    7 => 'LIST_RESPONSE_TYPE_MAX',
  );
}

class squirrel_protocol_ListRequest {
  static $_TSPEC;

  public $type_ = null;
  public $key_ = null;
  public $data_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'key_',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'data_',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type_'])) {
        $this->type_ = $vals['type_'];
      }
      if (isset($vals['key_'])) {
        $this->key_ = $vals['key_'];
      }
      if (isset($vals['data_'])) {
        $this->data_ = $vals['data_'];
      }
    }
  }

  public function getName() {
    return 'ListRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListRequest');
    if ($this->type_ !== null) {
      $xfer += $output->writeFieldBegin('type_', TType::I32, 1);
      $xfer += $output->writeI32($this->type_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key_ !== null) {
      $xfer += $output->writeFieldBegin('key_', TType::STRING, 2);
      $xfer += $output->writeString($this->key_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data_ !== null) {
      $xfer += $output->writeFieldBegin('data_', TType::STRING, 3);
      $xfer += $output->writeString($this->data_);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class squirrel_protocol_ListResponse {
  static $_TSPEC;

  public $result_ = null;
  public $data_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'data_',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['data_'])) {
        $this->data_ = $vals['data_'];
      }
    }
  }

  public function getName() {
    return 'ListResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListResponse');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data_ !== null) {
      $xfer += $output->writeFieldBegin('data_', TType::STRING, 2);
      $xfer += $output->writeString($this->data_);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
