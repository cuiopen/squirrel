<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['squirrel_protocol_E_DataType'] = array(
  'DATA_TYPE_KEYVALUE' => 0,
  'DATA_TYPE_NUMBER' => 1,
  'DATA_TYPE_LIST' => 2,
  'DATA_TYPE_MAP' => 3,
);

final class DataType {
  const DATA_TYPE_KEYVALUE = 0;
  const DATA_TYPE_NUMBER = 1;
  const DATA_TYPE_LIST = 2;
  const DATA_TYPE_MAP = 3;
  static public $__names = array(
    0 => 'DATA_TYPE_KEYVALUE',
    1 => 'DATA_TYPE_NUMBER',
    2 => 'DATA_TYPE_LIST',
    3 => 'DATA_TYPE_MAP',
  );
}

$GLOBALS['squirrel_protocol_E_StorageType'] = array(
  'STORAGE_TYPE_CACHE' => 1,
  'STORAGE_TYPE_DISK' => 2,
);

final class StorageType {
  const STORAGE_TYPE_CACHE = 1;
  const STORAGE_TYPE_DISK = 2;
  static public $__names = array(
    1 => 'STORAGE_TYPE_CACHE',
    2 => 'STORAGE_TYPE_DISK',
  );
}

class squirrel_protocol_Request {
  static $_TSPEC;

  public $data_type_ = null;
  public $storage_type_ = null;
  public $request_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'data_type_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'storage_type_',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'request_',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['data_type_'])) {
        $this->data_type_ = $vals['data_type_'];
      }
      if (isset($vals['storage_type_'])) {
        $this->storage_type_ = $vals['storage_type_'];
      }
      if (isset($vals['request_'])) {
        $this->request_ = $vals['request_'];
      }
    }
  }

  public function getName() {
    return 'Request';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->data_type_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->storage_type_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Request');
    if ($this->data_type_ !== null) {
      $xfer += $output->writeFieldBegin('data_type_', TType::I32, 1);
      $xfer += $output->writeI32($this->data_type_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storage_type_ !== null) {
      $xfer += $output->writeFieldBegin('storage_type_', TType::I32, 2);
      $xfer += $output->writeI32($this->storage_type_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request_ !== null) {
      $xfer += $output->writeFieldBegin('request_', TType::STRING, 3);
      $xfer += $output->writeString($this->request_);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class squirrel_protocol_Response {
  static $_TSPEC;

  public $data_type_ = null;
  public $response_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'data_type_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'response_',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['data_type_'])) {
        $this->data_type_ = $vals['data_type_'];
      }
      if (isset($vals['response_'])) {
        $this->response_ = $vals['response_'];
      }
    }
  }

  public function getName() {
    return 'Response';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->data_type_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->response_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Response');
    if ($this->data_type_ !== null) {
      $xfer += $output->writeFieldBegin('data_type_', TType::I32, 1);
      $xfer += $output->writeI32($this->data_type_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->response_ !== null) {
      $xfer += $output->writeFieldBegin('response_', TType::STRING, 2);
      $xfer += $output->writeString($this->response_);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
