<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['squirrel_protocol_E_KeyvalueRequestType'] = array(
  'KEYVALUE_REQUEST_TYPE_SET' => 0,
  'KEYVALUE_REQUEST_TYPE_GET' => 1,
  'KEYVALUE_REQUEST_TYPE_DELETE' => 2,
  'KEYVALUE_REQUEST_TYPE_MAX' => 3,
);

final class KeyvalueRequestType {
  const KEYVALUE_REQUEST_TYPE_SET = 0;
  const KEYVALUE_REQUEST_TYPE_GET = 1;
  const KEYVALUE_REQUEST_TYPE_DELETE = 2;
  const KEYVALUE_REQUEST_TYPE_MAX = 3;
  static public $__names = array(
    0 => 'KEYVALUE_REQUEST_TYPE_SET',
    1 => 'KEYVALUE_REQUEST_TYPE_GET',
    2 => 'KEYVALUE_REQUEST_TYPE_DELETE',
    3 => 'KEYVALUE_REQUEST_TYPE_MAX',
  );
}

$GLOBALS['squirrel_protocol_E_KeyvalueResponseType'] = array(
  'KEYVALUE_RESPONSE_TYPE_SUCCESS' => 0,
  'KEYVALUE_RESPONSE_TYPE_KEY_NOT_EXIST' => 1,
  'KEYVALUE_RESPONSE_TYPE_DISCONNECTED' => 2,
  'KEYVALUE_RESPONSE_TYPE_UNKNOWN' => 3,
  'KEYVALUE_RESPONSE_TYPE_MAX' => 4,
);

final class KeyvalueResponseType {
  const KEYVALUE_RESPONSE_TYPE_SUCCESS = 0;
  const KEYVALUE_RESPONSE_TYPE_KEY_NOT_EXIST = 1;
  const KEYVALUE_RESPONSE_TYPE_DISCONNECTED = 2;
  const KEYVALUE_RESPONSE_TYPE_UNKNOWN = 3;
  const KEYVALUE_RESPONSE_TYPE_MAX = 4;
  static public $__names = array(
    0 => 'KEYVALUE_RESPONSE_TYPE_SUCCESS',
    1 => 'KEYVALUE_RESPONSE_TYPE_KEY_NOT_EXIST',
    2 => 'KEYVALUE_RESPONSE_TYPE_DISCONNECTED',
    3 => 'KEYVALUE_RESPONSE_TYPE_UNKNOWN',
    4 => 'KEYVALUE_RESPONSE_TYPE_MAX',
  );
}

class squirrel_protocol_KeyvalueRequest {
  static $_TSPEC;

  public $type_ = null;
  public $key_list_ = null;
  public $value_list_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'key_list_',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'value_list_',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type_'])) {
        $this->type_ = $vals['type_'];
      }
      if (isset($vals['key_list_'])) {
        $this->key_list_ = $vals['key_list_'];
      }
      if (isset($vals['value_list_'])) {
        $this->value_list_ = $vals['value_list_'];
      }
    }
  }

  public function getName() {
    return 'KeyvalueRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->key_list_ = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->key_list_ []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->value_list_ = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->value_list_ []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KeyvalueRequest');
    if ($this->type_ !== null) {
      $xfer += $output->writeFieldBegin('type_', TType::I32, 1);
      $xfer += $output->writeI32($this->type_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key_list_ !== null) {
      if (!is_array($this->key_list_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('key_list_', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->key_list_));
        {
          foreach ($this->key_list_ as $iter12)
          {
            $xfer += $output->writeString($iter12);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value_list_ !== null) {
      if (!is_array($this->value_list_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value_list_', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->value_list_));
        {
          foreach ($this->value_list_ as $iter13)
          {
            $xfer += $output->writeString($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class squirrel_protocol_KeyvalueResponse {
  static $_TSPEC;

  public $result_ = null;
  public $value_list_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'result_',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'value_list_',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['result_'])) {
        $this->result_ = $vals['result_'];
      }
      if (isset($vals['value_list_'])) {
        $this->value_list_ = $vals['value_list_'];
      }
    }
  }

  public function getName() {
    return 'KeyvalueResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->result_);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->value_list_ = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readString($elem19);
              $this->value_list_ []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KeyvalueResponse');
    if ($this->result_ !== null) {
      $xfer += $output->writeFieldBegin('result_', TType::I32, 1);
      $xfer += $output->writeI32($this->result_);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value_list_ !== null) {
      if (!is_array($this->value_list_)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value_list_', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->value_list_));
        {
          foreach ($this->value_list_ as $iter20)
          {
            $xfer += $output->writeString($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
