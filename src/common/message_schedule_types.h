/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef message_schedule_TYPES_H
#define message_schedule_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "server_type_types.h"


namespace squirrel { namespace common {

struct MessageScheduleType {
  enum type {
    MESSAGE_SCHEDULE_TYPE_LOGIN_REQ = 0,
    MESSAGE_SCHEDULE_TYPE_LOGIN_RES = 1,
    MESSAGE_SCHEDULE_TYPE_LOGOUT_REQ = 2,
    MESSAGE_SCHEDULE_TYPE_LOGOUT_RES = 3,
    MESSAGE_SCHEDULE_TYPE_LOGIN_SYNC = 4,
    MESSAGE_SCHEDULE_TYPE_LOGOUT_SYNC = 5,
    MESSAGE_SCHEDULE_TYPE_LOGIN_SYNC_TRANSFER = 6,
    MESSAGE_SCHEDULE_TYPE_LOGOUT_SYNC_TRANSFER = 7,
    MESSAGE_SCHEDULE_TYPE_MAX = 8
  };
};

extern const std::map<int, const char*> _MessageScheduleType_VALUES_TO_NAMES;

typedef struct _MessageSchedule__isset {
  _MessageSchedule__isset() : message_(false) {}
  bool message_;
} _MessageSchedule__isset;

class MessageSchedule {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  MessageSchedule() : type_((MessageScheduleType::type)0), message_("") {
  }

  virtual ~MessageSchedule() throw() {}

  MessageScheduleType::type type_;
  std::string message_;

  _MessageSchedule__isset __isset;

  void __set_type_(const MessageScheduleType::type val) {
    type_ = val;
  }

  void __set_message_(const std::string& val) {
    message_ = val;
    __isset.message_ = true;
  }

  bool operator == (const MessageSchedule & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (__isset.message_ != rhs.__isset.message_)
      return false;
    else if (__isset.message_ && !(message_ == rhs.message_))
      return false;
    return true;
  }
  bool operator != (const MessageSchedule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageSchedule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageScheduleLoginReq {
 public:

  static const char* ascii_fingerprint; // = "990D2908C4D11DEF66B1A0269299ED14";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x0D,0x29,0x08,0xC4,0xD1,0x1D,0xEF,0x66,0xB1,0xA0,0x26,0x92,0x99,0xED,0x14};

  MessageScheduleLoginReq() : type_(( ::squirrel::common::ServerType::type)0), id_(0), host_(""), port_(0) {
  }

  virtual ~MessageScheduleLoginReq() throw() {}

   ::squirrel::common::ServerType::type type_;
  int32_t id_;
  std::string host_;
  int16_t port_;

  void __set_type_(const  ::squirrel::common::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_host_(const std::string& val) {
    host_ = val;
  }

  void __set_port_(const int16_t val) {
    port_ = val;
  }

  bool operator == (const MessageScheduleLoginReq & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(host_ == rhs.host_))
      return false;
    if (!(port_ == rhs.port_))
      return false;
    return true;
  }
  bool operator != (const MessageScheduleLoginReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageScheduleLoginReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MessageScheduleLoginRes__isset {
  _MessageScheduleLoginRes__isset() : server_signatures_(false) {}
  bool server_signatures_;
} _MessageScheduleLoginRes__isset;

class MessageScheduleLoginRes {
 public:

  static const char* ascii_fingerprint; // = "8750454006DE3D262FD48876F3039A29";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x50,0x45,0x40,0x06,0xDE,0x3D,0x26,0x2F,0xD4,0x88,0x76,0xF3,0x03,0x9A,0x29};

  MessageScheduleLoginRes() : result_(0) {
  }

  virtual ~MessageScheduleLoginRes() throw() {}

  bool result_;
  std::vector< ::squirrel::common::ServerSignature>  server_signatures_;

  _MessageScheduleLoginRes__isset __isset;

  void __set_result_(const bool val) {
    result_ = val;
  }

  void __set_server_signatures_(const std::vector< ::squirrel::common::ServerSignature> & val) {
    server_signatures_ = val;
    __isset.server_signatures_ = true;
  }

  bool operator == (const MessageScheduleLoginRes & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.server_signatures_ != rhs.__isset.server_signatures_)
      return false;
    else if (__isset.server_signatures_ && !(server_signatures_ == rhs.server_signatures_))
      return false;
    return true;
  }
  bool operator != (const MessageScheduleLoginRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageScheduleLoginRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageScheduleLogoutRes {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageScheduleLogoutRes() : result_(0) {
  }

  virtual ~MessageScheduleLogoutRes() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageScheduleLogoutRes & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageScheduleLogoutRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageScheduleLogoutRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageScheduleLoginSync {
 public:

  static const char* ascii_fingerprint; // = "990D2908C4D11DEF66B1A0269299ED14";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x0D,0x29,0x08,0xC4,0xD1,0x1D,0xEF,0x66,0xB1,0xA0,0x26,0x92,0x99,0xED,0x14};

  MessageScheduleLoginSync() : type_(( ::squirrel::common::ServerType::type)0), id_(0), host_(""), port_(0) {
  }

  virtual ~MessageScheduleLoginSync() throw() {}

   ::squirrel::common::ServerType::type type_;
  int32_t id_;
  std::string host_;
  int16_t port_;

  void __set_type_(const  ::squirrel::common::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_host_(const std::string& val) {
    host_ = val;
  }

  void __set_port_(const int16_t val) {
    port_ = val;
  }

  bool operator == (const MessageScheduleLoginSync & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(host_ == rhs.host_))
      return false;
    if (!(port_ == rhs.port_))
      return false;
    return true;
  }
  bool operator != (const MessageScheduleLoginSync &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageScheduleLoginSync & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageScheduleLogoutSync {
 public:

  static const char* ascii_fingerprint; // = "46A703A33337BED2F62F386FC66B2A5F";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

  MessageScheduleLogoutSync() : type_(( ::squirrel::common::ServerType::type)0), id_(0) {
  }

  virtual ~MessageScheduleLogoutSync() throw() {}

   ::squirrel::common::ServerType::type type_;
  int32_t id_;

  void __set_type_(const  ::squirrel::common::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  bool operator == (const MessageScheduleLogoutSync & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    return true;
  }
  bool operator != (const MessageScheduleLogoutSync &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageScheduleLogoutSync & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageScheduleLoginSyncTransfer {
 public:

  static const char* ascii_fingerprint; // = "47C7F5B44FD34D59430FED1EF5456924";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xC7,0xF5,0xB4,0x4F,0xD3,0x4D,0x59,0x43,0x0F,0xED,0x1E,0xF5,0x45,0x69,0x24};

  MessageScheduleLoginSyncTransfer() : type_(( ::squirrel::common::ServerType::type)0), id_(0), host_(""), port_(0), transfer_node_count_(0), transfer_schedule_id_(0) {
  }

  virtual ~MessageScheduleLoginSyncTransfer() throw() {}

   ::squirrel::common::ServerType::type type_;
  int32_t id_;
  std::string host_;
  int16_t port_;
  int8_t transfer_node_count_;
  int32_t transfer_schedule_id_;

  void __set_type_(const  ::squirrel::common::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_host_(const std::string& val) {
    host_ = val;
  }

  void __set_port_(const int16_t val) {
    port_ = val;
  }

  void __set_transfer_node_count_(const int8_t val) {
    transfer_node_count_ = val;
  }

  void __set_transfer_schedule_id_(const int32_t val) {
    transfer_schedule_id_ = val;
  }

  bool operator == (const MessageScheduleLoginSyncTransfer & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(host_ == rhs.host_))
      return false;
    if (!(port_ == rhs.port_))
      return false;
    if (!(transfer_node_count_ == rhs.transfer_node_count_))
      return false;
    if (!(transfer_schedule_id_ == rhs.transfer_schedule_id_))
      return false;
    return true;
  }
  bool operator != (const MessageScheduleLoginSyncTransfer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageScheduleLoginSyncTransfer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageScheduleLogoutSyncTransfer {
 public:

  static const char* ascii_fingerprint; // = "924F8BDF3DF8C9318D5314C70D4109B8";
  static const uint8_t binary_fingerprint[16]; // = {0x92,0x4F,0x8B,0xDF,0x3D,0xF8,0xC9,0x31,0x8D,0x53,0x14,0xC7,0x0D,0x41,0x09,0xB8};

  MessageScheduleLogoutSyncTransfer() : type_(( ::squirrel::common::ServerType::type)0), id_(0), transfer_node_count_(0), transfer_schedule_id_(0) {
  }

  virtual ~MessageScheduleLogoutSyncTransfer() throw() {}

   ::squirrel::common::ServerType::type type_;
  int32_t id_;
  int8_t transfer_node_count_;
  int32_t transfer_schedule_id_;

  void __set_type_(const  ::squirrel::common::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_transfer_node_count_(const int8_t val) {
    transfer_node_count_ = val;
  }

  void __set_transfer_schedule_id_(const int32_t val) {
    transfer_schedule_id_ = val;
  }

  bool operator == (const MessageScheduleLogoutSyncTransfer & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(transfer_node_count_ == rhs.transfer_node_count_))
      return false;
    if (!(transfer_schedule_id_ == rhs.transfer_schedule_id_))
      return false;
    return true;
  }
  bool operator != (const MessageScheduleLogoutSyncTransfer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageScheduleLogoutSyncTransfer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
