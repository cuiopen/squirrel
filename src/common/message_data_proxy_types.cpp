/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "message_data_proxy_types.h"

namespace squirrel { namespace common {

int _kMessageDataProxyTypeValues[] = {
  MessageDataProxyType::MESSAGE_DATA_PROXY_TYPE_LOGIN_REQ,
  MessageDataProxyType::MESSAGE_DATA_PROXY_TYPE_LOGIN_RES,
  MessageDataProxyType::MESSAGE_DATA_PROXY_TYPE_LOGOUT_REQ,
  MessageDataProxyType::MESSAGE_DATA_PROXY_TYPE_LOGOUT_RES,
  MessageDataProxyType::MESSAGE_DATA_PROXY_TYPE_DATA_REQUEST,
  MessageDataProxyType::MESSAGE_DATA_PROXY_TYPE_DATA_RESPONSE,
  MessageDataProxyType::MESSAGE_DATA_PROXY_TYPE_MAX
};
const char* _kMessageDataProxyTypeNames[] = {
  "MESSAGE_DATA_PROXY_TYPE_LOGIN_REQ",
  "MESSAGE_DATA_PROXY_TYPE_LOGIN_RES",
  "MESSAGE_DATA_PROXY_TYPE_LOGOUT_REQ",
  "MESSAGE_DATA_PROXY_TYPE_LOGOUT_RES",
  "MESSAGE_DATA_PROXY_TYPE_DATA_REQUEST",
  "MESSAGE_DATA_PROXY_TYPE_DATA_RESPONSE",
  "MESSAGE_DATA_PROXY_TYPE_MAX"
};
const std::map<int, const char*> _MessageDataProxyType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kMessageDataProxyTypeValues, _kMessageDataProxyTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kRequestRWTypeValues[] = {
  RequestRWType::REQUEST_RW_TYPE_READ,
  RequestRWType::REQUEST_RW_TYPE_WRITE,
  RequestRWType::REQUEST_RW_TYPE_MAX
};
const char* _kRequestRWTypeNames[] = {
  "REQUEST_RW_TYPE_READ",
  "REQUEST_RW_TYPE_WRITE",
  "REQUEST_RW_TYPE_MAX"
};
const std::map<int, const char*> _RequestRWType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRequestRWTypeValues, _kRequestRWTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MessageDataProxy::ascii_fingerprint = "24652790C81ECE22B629CB60A19F1E93";
const uint8_t MessageDataProxy::binary_fingerprint[16] = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

uint32_t MessageDataProxy::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = (MessageDataProxyType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->message_);
          this->__isset.message_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageDataProxy::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageDataProxy");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.message_) {
    xfer += oprot->writeFieldBegin("message_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->message_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageDataProxyLoginReq::ascii_fingerprint = "990D2908C4D11DEF66B1A0269299ED14";
const uint8_t MessageDataProxyLoginReq::binary_fingerprint[16] = {0x99,0x0D,0x29,0x08,0xC4,0xD1,0x1D,0xEF,0x66,0xB1,0xA0,0x26,0x92,0x99,0xED,0x14};

uint32_t MessageDataProxyLoginReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_host_ = false;
  bool isset_port_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type_ = ( ::squirrel::common::ServerType::type)ecast1;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host_);
          isset_host_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port_);
          isset_port_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_host_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageDataProxyLoginReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageDataProxyLoginReq");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("host_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->host_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("port_", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->port_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageDataProxyLoginRes::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageDataProxyLoginRes::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageDataProxyLoginRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageDataProxyLoginRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageDataProxyLoginRes");
  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageDataProxyLogoutRes::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageDataProxyLogoutRes::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageDataProxyLogoutRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageDataProxyLogoutRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageDataProxyLogoutRes");
  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageDataProxyDataRequest::ascii_fingerprint = "43B9A2472B587CBCA5B438FF0A20E9CC";
const uint8_t MessageDataProxyDataRequest::binary_fingerprint[16] = {0x43,0xB9,0xA2,0x47,0x2B,0x58,0x7C,0xBC,0xA5,0xB4,0x38,0xFF,0x0A,0x20,0xE9,0xCC};

uint32_t MessageDataProxyDataRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_request_id_ = false;
  bool isset_type_ = false;
  bool isset_storage_type_ = false;
  bool isset_rd_type_ = false;
  bool isset_key_ = false;
  bool isset_request_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->request_id_);
          isset_request_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type_ = ( ::squirrel::common::RequestType::type)ecast2;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->storage_type_ = ( ::squirrel::common::StorageType::type)ecast3;
          isset_storage_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->rd_type_ = (RequestRWType::type)ecast4;
          isset_rd_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key_);
          isset_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->request_);
          isset_request_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_request_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_storage_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rd_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_request_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageDataProxyDataRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageDataProxyDataRequest");
  xfer += oprot->writeFieldBegin("request_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->request_id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("storage_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->storage_type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("rd_type_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32((int32_t)this->rd_type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key_", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->key_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("request_", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeBinary(this->request_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageDataProxyDataResponse::ascii_fingerprint = "6C5C0773A901CCA3BE9D085B3B47A767";
const uint8_t MessageDataProxyDataResponse::binary_fingerprint[16] = {0x6C,0x5C,0x07,0x73,0xA9,0x01,0xCC,0xA3,0xBE,0x9D,0x08,0x5B,0x3B,0x47,0xA7,0x67};

uint32_t MessageDataProxyDataResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_request_id_ = false;
  bool isset_type_ = false;
  bool isset_key_ = false;
  bool isset_response_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->request_id_);
          isset_request_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->type_ = ( ::squirrel::common::RequestType::type)ecast5;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key_);
          isset_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->response_);
          isset_response_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_request_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_response_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageDataProxyDataResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageDataProxyDataResponse");
  xfer += oprot->writeFieldBegin("request_id_", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->request_id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->key_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("response_", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->response_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
