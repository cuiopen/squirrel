/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "message_schedule_types.h"

namespace squirrel { namespace common {

int _kMessageScheduleTypeValues[] = {
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_LOGIN_REQ,
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_LOGIN_RES,
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_LOGOUT_REQ,
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_LOGOUT_RES,
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_LOGIN_SYNC,
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_LOGOUT_SYNC,
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_LOGIN_SYNC_TRANSFER,
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_LOGOUT_SYNC_TRANSFER,
  MessageScheduleType::MESSAGE_SCHEDULE_TYPE_MAX
};
const char* _kMessageScheduleTypeNames[] = {
  "MESSAGE_SCHEDULE_TYPE_LOGIN_REQ",
  "MESSAGE_SCHEDULE_TYPE_LOGIN_RES",
  "MESSAGE_SCHEDULE_TYPE_LOGOUT_REQ",
  "MESSAGE_SCHEDULE_TYPE_LOGOUT_RES",
  "MESSAGE_SCHEDULE_TYPE_LOGIN_SYNC",
  "MESSAGE_SCHEDULE_TYPE_LOGOUT_SYNC",
  "MESSAGE_SCHEDULE_TYPE_LOGIN_SYNC_TRANSFER",
  "MESSAGE_SCHEDULE_TYPE_LOGOUT_SYNC_TRANSFER",
  "MESSAGE_SCHEDULE_TYPE_MAX"
};
const std::map<int, const char*> _MessageScheduleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kMessageScheduleTypeValues, _kMessageScheduleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MessageSchedule::ascii_fingerprint = "24652790C81ECE22B629CB60A19F1E93";
const uint8_t MessageSchedule::binary_fingerprint[16] = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

uint32_t MessageSchedule::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = (MessageScheduleType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->message_);
          this->__isset.message_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageSchedule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageSchedule");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.message_) {
    xfer += oprot->writeFieldBegin("message_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->message_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageScheduleLoginReq::ascii_fingerprint = "990D2908C4D11DEF66B1A0269299ED14";
const uint8_t MessageScheduleLoginReq::binary_fingerprint[16] = {0x99,0x0D,0x29,0x08,0xC4,0xD1,0x1D,0xEF,0x66,0xB1,0xA0,0x26,0x92,0x99,0xED,0x14};

uint32_t MessageScheduleLoginReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_host_ = false;
  bool isset_port_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type_ = ( ::squirrel::common::ServerType::type)ecast1;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host_);
          isset_host_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port_);
          isset_port_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_host_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageScheduleLoginReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageScheduleLoginReq");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("host_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->host_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("port_", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->port_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageScheduleLoginRes::ascii_fingerprint = "8750454006DE3D262FD48876F3039A29";
const uint8_t MessageScheduleLoginRes::binary_fingerprint[16] = {0x87,0x50,0x45,0x40,0x06,0xDE,0x3D,0x26,0x2F,0xD4,0x88,0x76,0xF3,0x03,0x9A,0x29};

uint32_t MessageScheduleLoginRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->server_signatures_.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            iprot->readListBegin(_etype5, _size2);
            this->server_signatures_.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->server_signatures_[_i6].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.server_signatures_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageScheduleLoginRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageScheduleLoginRes");
  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.server_signatures_) {
    xfer += oprot->writeFieldBegin("server_signatures_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->server_signatures_.size()));
      std::vector< ::squirrel::common::ServerSignature> ::const_iterator _iter7;
      for (_iter7 = this->server_signatures_.begin(); _iter7 != this->server_signatures_.end(); ++_iter7)
      {
        xfer += (*_iter7).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageScheduleLogoutRes::ascii_fingerprint = "5892306F7B861249AE8E27C8ED619593";
const uint8_t MessageScheduleLogoutRes::binary_fingerprint[16] = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

uint32_t MessageScheduleLogoutRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->result_);
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageScheduleLogoutRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageScheduleLogoutRes");
  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->result_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageScheduleLoginSync::ascii_fingerprint = "990D2908C4D11DEF66B1A0269299ED14";
const uint8_t MessageScheduleLoginSync::binary_fingerprint[16] = {0x99,0x0D,0x29,0x08,0xC4,0xD1,0x1D,0xEF,0x66,0xB1,0xA0,0x26,0x92,0x99,0xED,0x14};

uint32_t MessageScheduleLoginSync::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_host_ = false;
  bool isset_port_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->type_ = ( ::squirrel::common::ServerType::type)ecast8;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host_);
          isset_host_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port_);
          isset_port_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_host_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageScheduleLoginSync::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageScheduleLoginSync");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("host_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->host_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("port_", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->port_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageScheduleLogoutSync::ascii_fingerprint = "46A703A33337BED2F62F386FC66B2A5F";
const uint8_t MessageScheduleLogoutSync::binary_fingerprint[16] = {0x46,0xA7,0x03,0xA3,0x33,0x37,0xBE,0xD2,0xF6,0x2F,0x38,0x6F,0xC6,0x6B,0x2A,0x5F};

uint32_t MessageScheduleLogoutSync::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast9;
          xfer += iprot->readI32(ecast9);
          this->type_ = ( ::squirrel::common::ServerType::type)ecast9;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageScheduleLogoutSync::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageScheduleLogoutSync");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageScheduleLoginSyncTransfer::ascii_fingerprint = "47C7F5B44FD34D59430FED1EF5456924";
const uint8_t MessageScheduleLoginSyncTransfer::binary_fingerprint[16] = {0x47,0xC7,0xF5,0xB4,0x4F,0xD3,0x4D,0x59,0x43,0x0F,0xED,0x1E,0xF5,0x45,0x69,0x24};

uint32_t MessageScheduleLoginSyncTransfer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_host_ = false;
  bool isset_port_ = false;
  bool isset_transfer_node_count_ = false;
  bool isset_transfer_schedule_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->type_ = ( ::squirrel::common::ServerType::type)ecast10;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host_);
          isset_host_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port_);
          isset_port_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->transfer_node_count_);
          isset_transfer_node_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transfer_schedule_id_);
          isset_transfer_schedule_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_host_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_port_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transfer_node_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transfer_schedule_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageScheduleLoginSyncTransfer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageScheduleLoginSyncTransfer");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("host_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->host_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("port_", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->port_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("transfer_node_count_", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->transfer_node_count_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("transfer_schedule_id_", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->transfer_schedule_id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MessageScheduleLogoutSyncTransfer::ascii_fingerprint = "924F8BDF3DF8C9318D5314C70D4109B8";
const uint8_t MessageScheduleLogoutSyncTransfer::binary_fingerprint[16] = {0x92,0x4F,0x8B,0xDF,0x3D,0xF8,0xC9,0x31,0x8D,0x53,0x14,0xC7,0x0D,0x41,0x09,0xB8};

uint32_t MessageScheduleLogoutSyncTransfer::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_id_ = false;
  bool isset_transfer_node_count_ = false;
  bool isset_transfer_schedule_id_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->type_ = ( ::squirrel::common::ServerType::type)ecast11;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id_);
          isset_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->transfer_node_count_);
          isset_transfer_node_count_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->transfer_schedule_id_);
          isset_transfer_schedule_id_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transfer_node_count_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_transfer_schedule_id_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MessageScheduleLogoutSyncTransfer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MessageScheduleLogoutSyncTransfer");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("id_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("transfer_node_count_", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->transfer_node_count_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("transfer_schedule_id_", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->transfer_schedule_id_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
