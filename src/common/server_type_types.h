/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef server_type_TYPES_H
#define server_type_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace squirrel { namespace common {

struct ServerType {
  enum type {
    SERVER_TYPE_SCHEDULE = 0,
    SERVER_TYPE_GATEWAY = 1,
    SERVER_TYPE_ROUTE = 2,
    SERVER_TYPE_DATA_PROXY = 3,
    SERVER_TYPE_MAX = 4
  };
};

extern const std::map<int, const char*> _ServerType_VALUES_TO_NAMES;


class ServerSignature {
 public:

  static const char* ascii_fingerprint; // = "990D2908C4D11DEF66B1A0269299ED14";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x0D,0x29,0x08,0xC4,0xD1,0x1D,0xEF,0x66,0xB1,0xA0,0x26,0x92,0x99,0xED,0x14};

  ServerSignature() : type_((ServerType::type)0), id_(0), host_(""), port_(0) {
  }

  virtual ~ServerSignature() throw() {}

  ServerType::type type_;
  int32_t id_;
  std::string host_;
  int16_t port_;

  void __set_type_(const ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_host_(const std::string& val) {
    host_ = val;
  }

  void __set_port_(const int16_t val) {
    port_ = val;
  }

  bool operator == (const ServerSignature & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(host_ == rhs.host_))
      return false;
    if (!(port_ == rhs.port_))
      return false;
    return true;
  }
  bool operator != (const ServerSignature &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerSignature & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
