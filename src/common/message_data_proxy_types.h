/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef message_data_proxy_TYPES_H
#define message_data_proxy_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "server_type_types.h"
#include "request_type_types.h"


namespace squirrel { namespace common {

struct MessageDataProxyType {
  enum type {
    MESSAGE_DATA_PROXY_TYPE_LOGIN_REQ = 0,
    MESSAGE_DATA_PROXY_TYPE_LOGIN_RES = 1,
    MESSAGE_DATA_PROXY_TYPE_LOGOUT_REQ = 2,
    MESSAGE_DATA_PROXY_TYPE_LOGOUT_RES = 3,
    MESSAGE_DATA_PROXY_TYPE_DATA_REQUEST = 4,
    MESSAGE_DATA_PROXY_TYPE_DATA_RESPONSE = 5,
    MESSAGE_DATA_PROXY_TYPE_MAX = 6
  };
};

extern const std::map<int, const char*> _MessageDataProxyType_VALUES_TO_NAMES;

struct RequestRWType {
  enum type {
    REQUEST_RW_TYPE_READ = 0,
    REQUEST_RW_TYPE_WRITE = 1,
    REQUEST_RW_TYPE_MAX = 2
  };
};

extern const std::map<int, const char*> _RequestRWType_VALUES_TO_NAMES;

typedef struct _MessageDataProxy__isset {
  _MessageDataProxy__isset() : message_(false) {}
  bool message_;
} _MessageDataProxy__isset;

class MessageDataProxy {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  MessageDataProxy() : type_((MessageDataProxyType::type)0), message_("") {
  }

  virtual ~MessageDataProxy() throw() {}

  MessageDataProxyType::type type_;
  std::string message_;

  _MessageDataProxy__isset __isset;

  void __set_type_(const MessageDataProxyType::type val) {
    type_ = val;
  }

  void __set_message_(const std::string& val) {
    message_ = val;
    __isset.message_ = true;
  }

  bool operator == (const MessageDataProxy & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (__isset.message_ != rhs.__isset.message_)
      return false;
    else if (__isset.message_ && !(message_ == rhs.message_))
      return false;
    return true;
  }
  bool operator != (const MessageDataProxy &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageDataProxy & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageDataProxyLoginReq {
 public:

  static const char* ascii_fingerprint; // = "990D2908C4D11DEF66B1A0269299ED14";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x0D,0x29,0x08,0xC4,0xD1,0x1D,0xEF,0x66,0xB1,0xA0,0x26,0x92,0x99,0xED,0x14};

  MessageDataProxyLoginReq() : type_(( ::squirrel::common::ServerType::type)0), id_(0), host_(""), port_(0) {
  }

  virtual ~MessageDataProxyLoginReq() throw() {}

   ::squirrel::common::ServerType::type type_;
  int32_t id_;
  std::string host_;
  int16_t port_;

  void __set_type_(const  ::squirrel::common::ServerType::type val) {
    type_ = val;
  }

  void __set_id_(const int32_t val) {
    id_ = val;
  }

  void __set_host_(const std::string& val) {
    host_ = val;
  }

  void __set_port_(const int16_t val) {
    port_ = val;
  }

  bool operator == (const MessageDataProxyLoginReq & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(id_ == rhs.id_))
      return false;
    if (!(host_ == rhs.host_))
      return false;
    if (!(port_ == rhs.port_))
      return false;
    return true;
  }
  bool operator != (const MessageDataProxyLoginReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageDataProxyLoginReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageDataProxyLoginRes {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageDataProxyLoginRes() : result_(0) {
  }

  virtual ~MessageDataProxyLoginRes() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageDataProxyLoginRes & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageDataProxyLoginRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageDataProxyLoginRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageDataProxyLogoutRes {
 public:

  static const char* ascii_fingerprint; // = "5892306F7B861249AE8E27C8ED619593";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0x92,0x30,0x6F,0x7B,0x86,0x12,0x49,0xAE,0x8E,0x27,0xC8,0xED,0x61,0x95,0x93};

  MessageDataProxyLogoutRes() : result_(0) {
  }

  virtual ~MessageDataProxyLogoutRes() throw() {}

  bool result_;

  void __set_result_(const bool val) {
    result_ = val;
  }

  bool operator == (const MessageDataProxyLogoutRes & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    return true;
  }
  bool operator != (const MessageDataProxyLogoutRes &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageDataProxyLogoutRes & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageDataProxyDataRequest {
 public:

  static const char* ascii_fingerprint; // = "43B9A2472B587CBCA5B438FF0A20E9CC";
  static const uint8_t binary_fingerprint[16]; // = {0x43,0xB9,0xA2,0x47,0x2B,0x58,0x7C,0xBC,0xA5,0xB4,0x38,0xFF,0x0A,0x20,0xE9,0xCC};

  MessageDataProxyDataRequest() : request_id_(0), type_(( ::squirrel::common::RequestType::type)0), storage_type_(( ::squirrel::common::StorageType::type)0), rd_type_((RequestRWType::type)0), key_(""), request_("") {
  }

  virtual ~MessageDataProxyDataRequest() throw() {}

  int64_t request_id_;
   ::squirrel::common::RequestType::type type_;
   ::squirrel::common::StorageType::type storage_type_;
  RequestRWType::type rd_type_;
  std::string key_;
  std::string request_;

  void __set_request_id_(const int64_t val) {
    request_id_ = val;
  }

  void __set_type_(const  ::squirrel::common::RequestType::type val) {
    type_ = val;
  }

  void __set_storage_type_(const  ::squirrel::common::StorageType::type val) {
    storage_type_ = val;
  }

  void __set_rd_type_(const RequestRWType::type val) {
    rd_type_ = val;
  }

  void __set_key_(const std::string& val) {
    key_ = val;
  }

  void __set_request_(const std::string& val) {
    request_ = val;
  }

  bool operator == (const MessageDataProxyDataRequest & rhs) const
  {
    if (!(request_id_ == rhs.request_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(storage_type_ == rhs.storage_type_))
      return false;
    if (!(rd_type_ == rhs.rd_type_))
      return false;
    if (!(key_ == rhs.key_))
      return false;
    if (!(request_ == rhs.request_))
      return false;
    return true;
  }
  bool operator != (const MessageDataProxyDataRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageDataProxyDataRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MessageDataProxyDataResponse {
 public:

  static const char* ascii_fingerprint; // = "6C5C0773A901CCA3BE9D085B3B47A767";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x5C,0x07,0x73,0xA9,0x01,0xCC,0xA3,0xBE,0x9D,0x08,0x5B,0x3B,0x47,0xA7,0x67};

  MessageDataProxyDataResponse() : request_id_(0), type_(( ::squirrel::common::RequestType::type)0), key_(""), response_("") {
  }

  virtual ~MessageDataProxyDataResponse() throw() {}

  int64_t request_id_;
   ::squirrel::common::RequestType::type type_;
  std::string key_;
  std::string response_;

  void __set_request_id_(const int64_t val) {
    request_id_ = val;
  }

  void __set_type_(const  ::squirrel::common::RequestType::type val) {
    type_ = val;
  }

  void __set_key_(const std::string& val) {
    key_ = val;
  }

  void __set_response_(const std::string& val) {
    response_ = val;
  }

  bool operator == (const MessageDataProxyDataResponse & rhs) const
  {
    if (!(request_id_ == rhs.request_id_))
      return false;
    if (!(type_ == rhs.type_))
      return false;
    if (!(key_ == rhs.key_))
      return false;
    if (!(response_ == rhs.response_))
      return false;
    return true;
  }
  bool operator != (const MessageDataProxyDataResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageDataProxyDataResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
