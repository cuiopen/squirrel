/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef keyvalue_message_TYPES_H
#define keyvalue_message_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace squirrel { namespace common {

struct KeyvalueRequestType {
  enum type {
    KEYVALUE_REQUEST_TYPE_SET = 0,
    KEYVALUE_REQUEST_TYPE_GET = 1,
    KEYVALUE_REQUEST_TYPE_DELETE = 2,
    KEYVALUE_REQUEST_TYPE_SYNC_REDIS = 3,
    KEYVALUE_REQUEST_TYPE_MAX = 4
  };
};

extern const std::map<int, const char*> _KeyvalueRequestType_VALUES_TO_NAMES;

struct KeyvalueResponseType {
  enum type {
    KEYVALUE_RESPONSE_TYPE_SUCCESS = 0,
    KEYVALUE_RESPONSE_TYPE_KEY_NOT_EXIST = 1,
    KEYVALUE_RESPONSE_TYPE_DISCONNECTED = 2,
    KEYVALUE_RESPONSE_TYPE_UNKNOWN = 3,
    KEYVALUE_RESPONSE_TYPE_MAX = 4
  };
};

extern const std::map<int, const char*> _KeyvalueResponseType_VALUES_TO_NAMES;

typedef struct _KeyvalueRequest__isset {
  _KeyvalueRequest__isset() : value_(false) {}
  bool value_;
} _KeyvalueRequest__isset;

class KeyvalueRequest {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  KeyvalueRequest() : type_((KeyvalueRequestType::type)0), value_("") {
  }

  virtual ~KeyvalueRequest() throw() {}

  KeyvalueRequestType::type type_;
  std::string value_;

  _KeyvalueRequest__isset __isset;

  void __set_type_(const KeyvalueRequestType::type val) {
    type_ = val;
  }

  void __set_value_(const std::string& val) {
    value_ = val;
    __isset.value_ = true;
  }

  bool operator == (const KeyvalueRequest & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (__isset.value_ != rhs.__isset.value_)
      return false;
    else if (__isset.value_ && !(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const KeyvalueRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyvalueRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KeyvalueResponse__isset {
  _KeyvalueResponse__isset() : value_(false) {}
  bool value_;
} _KeyvalueResponse__isset;

class KeyvalueResponse {
 public:

  static const char* ascii_fingerprint; // = "19AAB18E981C4EB11AEBB34F40FF0939";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xAA,0xB1,0x8E,0x98,0x1C,0x4E,0xB1,0x1A,0xEB,0xB3,0x4F,0x40,0xFF,0x09,0x39};

  KeyvalueResponse() : type_((KeyvalueRequestType::type)0), result_((KeyvalueResponseType::type)0), value_("") {
  }

  virtual ~KeyvalueResponse() throw() {}

  KeyvalueRequestType::type type_;
  KeyvalueResponseType::type result_;
  std::string value_;

  _KeyvalueResponse__isset __isset;

  void __set_type_(const KeyvalueRequestType::type val) {
    type_ = val;
  }

  void __set_result_(const KeyvalueResponseType::type val) {
    result_ = val;
  }

  void __set_value_(const std::string& val) {
    value_ = val;
    __isset.value_ = true;
  }

  bool operator == (const KeyvalueResponse & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.value_ != rhs.__isset.value_)
      return false;
    else if (__isset.value_ && !(value_ == rhs.value_))
      return false;
    return true;
  }
  bool operator != (const KeyvalueResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyvalueResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
