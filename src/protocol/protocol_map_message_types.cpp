/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "protocol_map_message_types.h"

namespace squirrel { namespace protocol {

int _kMapRequestTypeValues[] = {
  MapRequestType::MAP_REQUEST_TYPE_INSERT,
  MapRequestType::MAP_REQUEST_TYPE_REMOVE,
  MapRequestType::MAP_REQUEST_TYPE_QUERY_RANKING,
  MapRequestType::MAP_REQUEST_TYPE_QUERY_RANKING_RANGE,
  MapRequestType::MAP_REQUEST_TYPE_RESET_RANKING_KEY,
  MapRequestType::MAP_REQUEST_TYPE_CLEAR,
  MapRequestType::MAP_REQUEST_TYPE_DELETE,
  MapRequestType::MAP_REQUEST_TYPE_MAX
};
const char* _kMapRequestTypeNames[] = {
  "MAP_REQUEST_TYPE_INSERT",
  "MAP_REQUEST_TYPE_REMOVE",
  "MAP_REQUEST_TYPE_QUERY_RANKING",
  "MAP_REQUEST_TYPE_QUERY_RANKING_RANGE",
  "MAP_REQUEST_TYPE_RESET_RANKING_KEY",
  "MAP_REQUEST_TYPE_CLEAR",
  "MAP_REQUEST_TYPE_DELETE",
  "MAP_REQUEST_TYPE_MAX"
};
const std::map<int, const char*> _MapRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kMapRequestTypeValues, _kMapRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMapResponseTypeValues[] = {
  MapResponseType::MAP_RESPONSE_TYPE_SUCCESS,
  MapResponseType::MAP_RESPONSE_TYPE_KEY_NOT_EXIST,
  MapResponseType::MAP_RESPONSE_TYPE_ELEM_ALREDY_EXIST,
  MapResponseType::MAP_RESPONSE_TYPE_ELEM_NOT_EXIST,
  MapResponseType::MAP_RESPONSE_TYPE_DISCONNECTED,
  MapResponseType::MAP_RESPONSE_TYPE_UNKNOWN,
  MapResponseType::MAP_RESPONSE_TYPE_MAX
};
const char* _kMapResponseTypeNames[] = {
  "MAP_RESPONSE_TYPE_SUCCESS",
  "MAP_RESPONSE_TYPE_KEY_NOT_EXIST",
  "MAP_RESPONSE_TYPE_ELEM_ALREDY_EXIST",
  "MAP_RESPONSE_TYPE_ELEM_NOT_EXIST",
  "MAP_RESPONSE_TYPE_DISCONNECTED",
  "MAP_RESPONSE_TYPE_UNKNOWN",
  "MAP_RESPONSE_TYPE_MAX"
};
const std::map<int, const char*> _MapResponseType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kMapResponseTypeValues, _kMapResponseTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMapSortTypeValues[] = {
  MapSortType::MAP_SORT_TYPE_ASC,
  MapSortType::MAP_SORT_TYPE_DESC,
  MapSortType::MAP_SORT_TYPE_MAX
};
const char* _kMapSortTypeNames[] = {
  "MAP_SORT_TYPE_ASC",
  "MAP_SORT_TYPE_DESC",
  "MAP_SORT_TYPE_MAX"
};
const std::map<int, const char*> _MapSortType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMapSortTypeValues, _kMapSortTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* MapRequest::ascii_fingerprint = "8A168E64138582CD39890B77E0F15FF4";
const uint8_t MapRequest::binary_fingerprint[16] = {0x8A,0x16,0x8E,0x64,0x13,0x85,0x82,0xCD,0x39,0x89,0x0B,0x77,0xE0,0xF1,0x5F,0xF4};

uint32_t MapRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_key_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = (MapRequestType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key_);
          isset_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data_);
          this->__isset.data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapRequest");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->key_);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.data_) {
    xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeBinary(this->data_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapResponse::ascii_fingerprint = "24652790C81ECE22B629CB60A19F1E93";
const uint8_t MapResponse::binary_fingerprint[16] = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

uint32_t MapResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type_ = (MapResponseType::type)ecast1;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data_);
          this->__isset.data_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapResponse");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.data_) {
    xfer += oprot->writeFieldBegin("data_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->data_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapInsertRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t MapInsertRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t MapInsertRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ranking_key_ = false;
  bool isset_element_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ranking_key_);
          isset_ranking_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->element_);
          isset_element_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ranking_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_element_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapInsertRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapInsertRequest");
  xfer += oprot->writeFieldBegin("ranking_key_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ranking_key_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("element_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->element_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapResetRankingKeyRequest::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t MapResetRankingKeyRequest::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t MapResetRankingKeyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ranking_key_ = false;
  bool isset_element_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ranking_key_);
          isset_ranking_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->element_);
          isset_element_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ranking_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_element_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapResetRankingKeyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapResetRankingKeyRequest");
  xfer += oprot->writeFieldBegin("ranking_key_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ranking_key_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("element_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->element_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapRemoveRequest::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MapRemoveRequest::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MapRemoveRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_element_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->element_);
          isset_element_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_element_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapRemoveRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapRemoveRequest");
  xfer += oprot->writeFieldBegin("element_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->element_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapQueryRankingRequest::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t MapQueryRankingRequest::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t MapQueryRankingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_element_ = false;
  bool isset_sort_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->element_);
          isset_element_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->sort_type_ = (MapSortType::type)ecast2;
          isset_sort_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_element_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sort_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapQueryRankingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapQueryRankingRequest");
  xfer += oprot->writeFieldBegin("element_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->element_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sort_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->sort_type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapQueryRankingResponse::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t MapQueryRankingResponse::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t MapQueryRankingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ranking_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ranking_);
          isset_ranking_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ranking_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapQueryRankingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapQueryRankingResponse");
  xfer += oprot->writeFieldBegin("ranking_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ranking_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapQueryRankingRangeRequest::ascii_fingerprint = "4F8ABE747D9A2DF14F7E84DDBE60D55C";
const uint8_t MapQueryRankingRangeRequest::binary_fingerprint[16] = {0x4F,0x8A,0xBE,0x74,0x7D,0x9A,0x2D,0xF1,0x4F,0x7E,0x84,0xDD,0xBE,0x60,0xD5,0x5C};

uint32_t MapQueryRankingRangeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_start_ = false;
  bool isset_end_ = false;
  bool isset_sort_type_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_);
          isset_start_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->end_);
          isset_end_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->sort_type_ = (MapSortType::type)ecast3;
          isset_sort_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_start_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_end_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_sort_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapQueryRankingRangeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapQueryRankingRangeRequest");
  xfer += oprot->writeFieldBegin("start_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->start_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("end_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->end_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sort_type_", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->sort_type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapQueryRankingRangeInfo::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t MapQueryRankingRangeInfo::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t MapQueryRankingRangeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_ranking_ = false;
  bool isset_ranking_key_ = false;
  bool isset_elements_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ranking_);
          isset_ranking_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ranking_key_);
          isset_ranking_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->elements_);
          isset_elements_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_ranking_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ranking_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_elements_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapQueryRankingRangeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapQueryRankingRangeInfo");
  xfer += oprot->writeFieldBegin("ranking_", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ranking_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ranking_key_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ranking_key_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("elements_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->elements_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* MapQueryRankingRangeResponse::ascii_fingerprint = "0146931C2E0BE367167559BCD459F51A";
const uint8_t MapQueryRankingRangeResponse::binary_fingerprint[16] = {0x01,0x46,0x93,0x1C,0x2E,0x0B,0xE3,0x67,0x16,0x75,0x59,0xBC,0xD4,0x59,0xF5,0x1A};

uint32_t MapQueryRankingRangeResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_elements_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->elements_.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            iprot->readListBegin(_etype7, _size4);
            this->elements_.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->elements_[_i8].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_elements_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_elements_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MapQueryRankingRangeResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MapQueryRankingRangeResponse");
  xfer += oprot->writeFieldBegin("elements_", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->elements_.size()));
    std::vector<MapQueryRankingRangeInfo> ::const_iterator _iter9;
    for (_iter9 = this->elements_.begin(); _iter9 != this->elements_.end(); ++_iter9)
    {
      xfer += (*_iter9).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
