/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef protocol_keyvalue_message_TYPES_H
#define protocol_keyvalue_message_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace squirrel { namespace protocol {

struct KeyvalueRequestType {
  enum type {
    KEYVALUE_REQUEST_TYPE_SET = 0,
    KEYVALUE_REQUEST_TYPE_GET = 1,
    KEYVALUE_REQUEST_TYPE_DELETE = 2,
    KEYVALUE_REQUEST_TYPE_MAX = 3
  };
};

extern const std::map<int, const char*> _KeyvalueRequestType_VALUES_TO_NAMES;

struct KeyvalueResponseType {
  enum type {
    KEYVALUE_RESPONSE_TYPE_SUCCESS = 0,
    KEYVALUE_RESPONSE_TYPE_KEY_NOT_EXIST = 1,
    KEYVALUE_RESPONSE_TYPE_DISCONNECTED = 2,
    KEYVALUE_RESPONSE_TYPE_UNKNOWN = 3,
    KEYVALUE_RESPONSE_TYPE_MAX = 4
  };
};

extern const std::map<int, const char*> _KeyvalueResponseType_VALUES_TO_NAMES;

typedef struct _KeyvalueRequest__isset {
  _KeyvalueRequest__isset() : value_list_(false) {}
  bool value_list_;
} _KeyvalueRequest__isset;

class KeyvalueRequest {
 public:

  static const char* ascii_fingerprint; // = "6C39DC540A2C9E21C05EE69886A74FAE";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0x39,0xDC,0x54,0x0A,0x2C,0x9E,0x21,0xC0,0x5E,0xE6,0x98,0x86,0xA7,0x4F,0xAE};

  KeyvalueRequest() : type_((KeyvalueRequestType::type)0) {
  }

  virtual ~KeyvalueRequest() throw() {}

  KeyvalueRequestType::type type_;
  std::vector<std::string>  key_list_;
  std::vector<std::string>  value_list_;

  _KeyvalueRequest__isset __isset;

  void __set_type_(const KeyvalueRequestType::type val) {
    type_ = val;
  }

  void __set_key_list_(const std::vector<std::string> & val) {
    key_list_ = val;
  }

  void __set_value_list_(const std::vector<std::string> & val) {
    value_list_ = val;
    __isset.value_list_ = true;
  }

  bool operator == (const KeyvalueRequest & rhs) const
  {
    if (!(type_ == rhs.type_))
      return false;
    if (!(key_list_ == rhs.key_list_))
      return false;
    if (__isset.value_list_ != rhs.__isset.value_list_)
      return false;
    else if (__isset.value_list_ && !(value_list_ == rhs.value_list_))
      return false;
    return true;
  }
  bool operator != (const KeyvalueRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyvalueRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KeyvalueResponse__isset {
  _KeyvalueResponse__isset() : value_list_(false) {}
  bool value_list_;
} _KeyvalueResponse__isset;

class KeyvalueResponse {
 public:

  static const char* ascii_fingerprint; // = "EE4D40E68039374D93838243069CCE4B";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0x4D,0x40,0xE6,0x80,0x39,0x37,0x4D,0x93,0x83,0x82,0x43,0x06,0x9C,0xCE,0x4B};

  KeyvalueResponse() : result_((KeyvalueResponseType::type)0) {
  }

  virtual ~KeyvalueResponse() throw() {}

  KeyvalueResponseType::type result_;
  std::vector<std::string>  value_list_;

  _KeyvalueResponse__isset __isset;

  void __set_result_(const KeyvalueResponseType::type val) {
    result_ = val;
  }

  void __set_value_list_(const std::vector<std::string> & val) {
    value_list_ = val;
    __isset.value_list_ = true;
  }

  bool operator == (const KeyvalueResponse & rhs) const
  {
    if (!(result_ == rhs.result_))
      return false;
    if (__isset.value_list_ != rhs.__isset.value_list_)
      return false;
    else if (__isset.value_list_ && !(value_list_ == rhs.value_list_))
      return false;
    return true;
  }
  bool operator != (const KeyvalueResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyvalueResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
