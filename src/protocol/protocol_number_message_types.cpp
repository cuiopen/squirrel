/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "protocol_number_message_types.h"

namespace squirrel { namespace protocol {

int _kNumberRequestTypeValues[] = {
  NumberRequestType::NUMBER_REQUEST_TYPE_INC,
  NumberRequestType::NUMBER_REQUEST_TYPE_DEC,
  NumberRequestType::NUMBER_REQUEST_TYPE_RESET,
  NumberRequestType::NUMBER_REQUEST_TYPE_DELETE,
  NumberRequestType::NUMBER_REQUEST_TYPE_MAX
};
const char* _kNumberRequestTypeNames[] = {
  "NUMBER_REQUEST_TYPE_INC",
  "NUMBER_REQUEST_TYPE_DEC",
  "NUMBER_REQUEST_TYPE_RESET",
  "NUMBER_REQUEST_TYPE_DELETE",
  "NUMBER_REQUEST_TYPE_MAX"
};
const std::map<int, const char*> _NumberRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kNumberRequestTypeValues, _kNumberRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNumberResponseTypeValues[] = {
  NumberResponseType::NUMBER_RESPONSE_TYPE_SUCCESS,
  NumberResponseType::NUMBER_RESPONSE_TYPE_KEY_NOT_EXIST,
  NumberResponseType::NUMBER_RESPONSE_TYPE_DISCONNECTED,
  NumberResponseType::NUMBER_RESPONSE_TYPE_UNKNOWN,
  NumberResponseType::NUMBER_RESPONSE_TYPE_MAX
};
const char* _kNumberResponseTypeNames[] = {
  "NUMBER_RESPONSE_TYPE_SUCCESS",
  "NUMBER_RESPONSE_TYPE_KEY_NOT_EXIST",
  "NUMBER_RESPONSE_TYPE_DISCONNECTED",
  "NUMBER_RESPONSE_TYPE_UNKNOWN",
  "NUMBER_RESPONSE_TYPE_MAX"
};
const std::map<int, const char*> _NumberResponseType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kNumberResponseTypeValues, _kNumberResponseTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* NumberRequest::ascii_fingerprint = "8A168E64138582CD39890B77E0F15FF4";
const uint8_t NumberRequest::binary_fingerprint[16] = {0x8A,0x16,0x8E,0x64,0x13,0x85,0x82,0xCD,0x39,0x89,0x0B,0x77,0xE0,0xF1,0x5F,0xF4};

uint32_t NumberRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_key_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = (NumberRequestType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key_);
          isset_key_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->increment_);
          this->__isset.increment_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NumberRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NumberRequest");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->key_);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.increment_) {
    xfer += oprot->writeFieldBegin("increment_", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->increment_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NumberResponse::ascii_fingerprint = "24652790C81ECE22B629CB60A19F1E93";
const uint8_t NumberResponse::binary_fingerprint[16] = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

uint32_t NumberResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->result_ = (NumberResponseType::type)ecast1;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value_);
          this->__isset.value_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NumberResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NumberResponse");
  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.value_) {
    xfer += oprot->writeFieldBegin("value_", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->value_);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
