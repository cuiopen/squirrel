/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "message_types.h"

namespace squirrel { namespace protocol {

int _kDataTypeValues[] = {
  DataType::DATA_TYPE_KEYVALUE,
  DataType::DATA_TYPE_NUMBER,
  DataType::DATA_TYPE_LIST,
  DataType::DATA_TYPE_MAP
};
const char* _kDataTypeNames[] = {
  "DATA_TYPE_KEYVALUE",
  "DATA_TYPE_NUMBER",
  "DATA_TYPE_LIST",
  "DATA_TYPE_MAP"
};
const std::map<int, const char*> _DataType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kDataTypeValues, _kDataTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStorageTypeValues[] = {
  StorageType::STORAGE_TYPE_CACHE,
  StorageType::STORAGE_TYPE_DISK
};
const char* _kStorageTypeNames[] = {
  "STORAGE_TYPE_CACHE",
  "STORAGE_TYPE_DISK"
};
const std::map<int, const char*> _StorageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kStorageTypeValues, _kStorageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Request::ascii_fingerprint = "320A4E0A7D1C541E521D7F65F2108F77";
const uint8_t Request::binary_fingerprint[16] = {0x32,0x0A,0x4E,0x0A,0x7D,0x1C,0x54,0x1E,0x52,0x1D,0x7F,0x65,0xF2,0x10,0x8F,0x77};

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_data_type_ = false;
  bool isset_storage_type_ = false;
  bool isset_request_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->data_type_ = (DataType::type)ecast0;
          isset_data_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->storage_type_ = (StorageType::type)ecast1;
          isset_storage_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->request_);
          isset_request_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_data_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_storage_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_request_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Request");
  xfer += oprot->writeFieldBegin("data_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->data_type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("storage_type_", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->storage_type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("request_", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->request_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Response::ascii_fingerprint = "19B5240589E680301A7E32DF3971EFBE";
const uint8_t Response::binary_fingerprint[16] = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

uint32_t Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_data_type_ = false;
  bool isset_response_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->data_type_ = (DataType::type)ecast2;
          isset_data_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->response_);
          isset_response_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_data_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_response_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Response");
  xfer += oprot->writeFieldBegin("data_type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->data_type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("response_", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->response_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
