/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "protocol_keyvalue_message_types.h"

namespace squirrel { namespace protocol {

int _kKeyvalueRequestTypeValues[] = {
  KeyvalueRequestType::KEYVALUE_REQUEST_TYPE_SET,
  KeyvalueRequestType::KEYVALUE_REQUEST_TYPE_GET,
  KeyvalueRequestType::KEYVALUE_REQUEST_TYPE_DELETE,
  KeyvalueRequestType::KEYVALUE_REQUEST_TYPE_MAX
};
const char* _kKeyvalueRequestTypeNames[] = {
  "KEYVALUE_REQUEST_TYPE_SET",
  "KEYVALUE_REQUEST_TYPE_GET",
  "KEYVALUE_REQUEST_TYPE_DELETE",
  "KEYVALUE_REQUEST_TYPE_MAX"
};
const std::map<int, const char*> _KeyvalueRequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kKeyvalueRequestTypeValues, _kKeyvalueRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kKeyvalueResponseTypeValues[] = {
  KeyvalueResponseType::KEYVALUE_RESPONSE_TYPE_SUCCESS,
  KeyvalueResponseType::KEYVALUE_RESPONSE_TYPE_KEY_NOT_EXIST,
  KeyvalueResponseType::KEYVALUE_RESPONSE_TYPE_DISCONNECTED,
  KeyvalueResponseType::KEYVALUE_RESPONSE_TYPE_UNKNOWN,
  KeyvalueResponseType::KEYVALUE_RESPONSE_TYPE_MAX
};
const char* _kKeyvalueResponseTypeNames[] = {
  "KEYVALUE_RESPONSE_TYPE_SUCCESS",
  "KEYVALUE_RESPONSE_TYPE_KEY_NOT_EXIST",
  "KEYVALUE_RESPONSE_TYPE_DISCONNECTED",
  "KEYVALUE_RESPONSE_TYPE_UNKNOWN",
  "KEYVALUE_RESPONSE_TYPE_MAX"
};
const std::map<int, const char*> _KeyvalueResponseType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kKeyvalueResponseTypeValues, _kKeyvalueResponseTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* KeyvalueRequest::ascii_fingerprint = "6C39DC540A2C9E21C05EE69886A74FAE";
const uint8_t KeyvalueRequest::binary_fingerprint[16] = {0x6C,0x39,0xDC,0x54,0x0A,0x2C,0x9E,0x21,0xC0,0x5E,0xE6,0x98,0x86,0xA7,0x4F,0xAE};

uint32_t KeyvalueRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type_ = false;
  bool isset_key_list_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type_ = (KeyvalueRequestType::type)ecast0;
          isset_type_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->key_list_.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            iprot->readListBegin(_etype4, _size1);
            this->key_list_.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readBinary(this->key_list_[_i5]);
            }
            iprot->readListEnd();
          }
          isset_key_list_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->value_list_.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            iprot->readListBegin(_etype9, _size6);
            this->value_list_.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readBinary(this->value_list_[_i10]);
            }
            iprot->readListEnd();
          }
          this->__isset.value_list_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key_list_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeyvalueRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KeyvalueRequest");
  xfer += oprot->writeFieldBegin("type_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type_);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key_list_", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->key_list_.size()));
    std::vector<std::string> ::const_iterator _iter11;
    for (_iter11 = this->key_list_.begin(); _iter11 != this->key_list_.end(); ++_iter11)
    {
      xfer += oprot->writeBinary((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  if (this->__isset.value_list_) {
    xfer += oprot->writeFieldBegin("value_list_", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->value_list_.size()));
      std::vector<std::string> ::const_iterator _iter12;
      for (_iter12 = this->value_list_.begin(); _iter12 != this->value_list_.end(); ++_iter12)
      {
        xfer += oprot->writeBinary((*_iter12));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* KeyvalueResponse::ascii_fingerprint = "EE4D40E68039374D93838243069CCE4B";
const uint8_t KeyvalueResponse::binary_fingerprint[16] = {0xEE,0x4D,0x40,0xE6,0x80,0x39,0x37,0x4D,0x93,0x83,0x82,0x43,0x06,0x9C,0xCE,0x4B};

uint32_t KeyvalueResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_result_ = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->result_ = (KeyvalueResponseType::type)ecast13;
          isset_result_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->value_list_.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            iprot->readListBegin(_etype17, _size14);
            this->value_list_.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readBinary(this->value_list_[_i18]);
            }
            iprot->readListEnd();
          }
          this->__isset.value_list_ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_result_)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeyvalueResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KeyvalueResponse");
  xfer += oprot->writeFieldBegin("result_", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->result_);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.value_list_) {
    xfer += oprot->writeFieldBegin("value_list_", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->value_list_.size()));
      std::vector<std::string> ::const_iterator _iter19;
      for (_iter19 = this->value_list_.begin(); _iter19 != this->value_list_.end(); ++_iter19)
      {
        xfer += oprot->writeBinary((*_iter19));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace
